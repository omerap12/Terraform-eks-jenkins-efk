pipeline {
    agent any
    
    environment {
        AWS_ACCESS_KEY_ID = credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
        EKS_CLUSTER_NAME = 'omer-cluster'
        NAMESPACE = 'default'
    }
    
    stages {
        stage('Install Helm') {
            steps {
                script {
                    sh '''
                        curl -fsSL -o get_helm.sh "https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3"
                        chmod 700 get_helm.sh
                        ./get_helm.sh
                        echo "Helm installed successfully"
                        helm version --short
                    '''
                }
            }
        }

        stage('Install AWS CLI') {
            steps {
                script {
                    sh '''
                        curl -fsSL -o awscliv2.zip "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip"
                        unzip -o awscliv2.zip
                        ./aws/install --update
                        echo "AWS CLI installed successfully"
                        aws --version
                    '''
                }
            }
        }
        
        stage ('Connect to aws') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'AWS_ACCESS_KEY_ID', variable: 'AWS_ACCESS_KEY_ID'),
                                     string(credentialsId: 'AWS_SECRET_ACCESS_KEY', variable: 'AWS_SECRET_ACCESS_KEY')]) {
                                        sh '''
                    aws configure set aws_access_key_id "$AWS_ACCESS_KEY_ID"  && aws configure set aws_secret_access_key "$AWS_ACCESS_KEY_SECRET"  && aws configure set region "us-east-1"
                    '''
                    }
                    
                }
            }
        }
        
        stage ('Connect to EKS cluster') {
            steps {
                script {
                    sh "aws eks --region us-east-1 update-kubeconfig --name $EKS_CLUSTER_NAME"
                }
            }
        }
        
        stage('Install kubectl') {
            steps {
                script {
                    sh '''
                        curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
                        chmod +x kubectl
                        mv kubectl /usr/local/bin/
                        kubectl version --client
                        echo "kubectl installed successfully"
                    '''
                }
            }
        }
        stage('Write values.yml') {
            steps {
                script {
                    writeFile file: 'values.yml', text: '''
                        resources:
                          requests:
                            cpu: '100m'
                          limits:
                            cpu: '200m'
                    '''
                }
            }
        }
        
        stage ('Deploy binami Helm chart') {
            steps {
                script {
                    sh '''
                        helm repo add bitnami https://charts.bitnami.com/bitnami
                        helm repo update
                        helm install my-nginx-release bitnami/nginx --namespace $NAMESPACE --values values.yml
                        sleep 20
                        kubectl get deployment -n default
                    '''
                }
            }
        }
        
        stage ('Deploy metric server') {
            steps {
                script {
                    sh '''
                        kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml
                        sleep 60
                    '''
                }
            }
        }
        stage ('Check metric server') {
            steps {
                script {
                    sh 'kubectl get deployment metrics-server -n kube-system'
                    sh 'kubectl top node'
                }
                    
            }
        }

        stage ('Install Keda') {
            steps {
                script {
                    sh "kubectl apply --server-side -f https://github.com/kedacore/keda/releases/download/v2.12.0/keda-2.12.0-core.yaml"
                }
            }
        }

        stage ('Create keda-cpu autoscaling') {
            steps {
                script {
                    writeFile file: 'cpu-cron-scaledobject.yml', text: '''
                        apiVersion: keda.sh/v1alpha1
                        kind: ScaledObject
                        metadata:
                          name: cron-cpu-scaledobject
                          namespace: default
                        spec:
                          scaleTargetRef:
                            name: my-nginx-release
                          minReplicaCount: 2
                          triggers:
                          - type: cpu
                            metricType: Utilization
                            metadata:
                              value: "90"
                          - type: cron
                            metadata:
                              timezone: Asia/Jerusalem
                              start: "57 11 * * *"
                              end: "10 12 * * *"
                              desiredReplicas: "4"
                    '''
                }
            }
        }

        stage ('Create CPU and Cron autoscaling') {
            steps {
                script {
                    sh 'kubectl apply -f cpu-cron-scaledobject.yml'
                    sleep 60
                    sh 'kubectl get hpa -n default'
                }
            }
        }
    }
    
    post {
        always {
            // Clean up resources, if needed
            sh 'rm -rf awscliv2.zip'
            sh 'rm -rf get_helm.sh'
            sh 'rm -rf values.yml'
            sh 'rm -rf cpu-cron-scaledobject.yml'
        }
    }
}